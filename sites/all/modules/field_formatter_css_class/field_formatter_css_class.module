<?php
/**
 * @file
 * adds a formatter for text fields that render as css classes.
 *
 */

/**
 * Implements hook_field_formatter_info().
 */
function field_formatter_css_class_field_formatter_info() {
  return array(
    'cssclass_formatter' => array(
      'label' => t('CSS Class'),
      'field types' => array('text', 'list_boolean', 'list_text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function field_formatter_css_class_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return array(); // nothing to show
}

/**
 * Implements hook_preprocess_HOOK().
 */
function field_formatter_css_class_preprocess_node(&$variables) {
//dpm($variables['elements']['#entity_type']); // 'node'
  $entity = $variables['node'];
  $bundle_name = $variables['type'];
  $view_mode = $variables['view_mode'];

  $fields_info = field_info_instances('node', $bundle_name);
  foreach ($fields_info as $field_name => $instance) {

    $display = field_get_display($instance, $view_mode, $entity);
    if ($display['type'] == 'cssclass_formatter') {

      $field_info = field_info_field($field_name);
      $values = field_get_items('node', $entity, $field_name);
      if ($values != FALSE) {
        foreach ($values as $delta => $field) {

          if ($field_info['type'] == 'list_boolean') {
            $variables['classes_array'][] = check_plain($field_info['settings']['allowed_values'][$field['value']]);
          } else {
            $variables['classes_array'][] = check_plain($field['value']);
          }

        }
      }

    }

  }
}
