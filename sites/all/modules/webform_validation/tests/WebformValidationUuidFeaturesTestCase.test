<?php

/**
 * Test the features integration of webform_validation.
 */
class WebformValidationUuidFeaturesTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Webform Validation: UUID features integration'),
      'description' => t('Test the integration of webform_validation and uuid_features.'),
      'group' => t('Webform'),
      'dependencies' => array('webform_validation_testing'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('webform_validation_testing'));
    module_load_include('entity.inc', 'uuid');
  }

  /**
   * Test whether the validations are loaded properly by enabling the feature.
   */
  public function testValidationsLoaded() {
    $uuids = array('4ca52408-9bbd-49fa-baae-698c37dc5f42');
    $nids = entity_get_id_by_uuid('node', $uuids);
    $nid = reset($nids);
    $rules = webform_validation_get_node_rules($nid);
    $this->assertEqual(1, count($rules));
    $rule = reset($rules);
    unset($rule['ruleid']);
    unset($rule['nid']);
    $k = array_keys($rule['components']);
    $rule['components'] = array_combine($k, $k);
    $this->assertEqual(array(
      'rulename' => 'answer_42',
      'validator' => 'specific_value',
      'data' => '42',
      'error_message' => 'Thatâ€™s the wrong answer.',
      'negate' => FALSE,
      'weight' => '0',
      'components' => array(
        1 => 1,
      ),
    ), $rule);
  }

  /**
   * Test whether re-exporting the feature yields the same result.
   */
  public function testValidationExport() {
    features_include_defaults();

    // Get data for a new export.
    $uuids = array('4ca52408-9bbd-49fa-baae-698c37dc5f42');
    $data = features_invoke('uuid_node', 'features_export_render', 'webform_validation_uuid_features_test', $uuids);
    $nodes = eval($data['uuid_features_default_content']);
    $this->assertEqual(1, count($nodes));
    $node = (object) reset($nodes);
    $this->assertEqual($uuids[0], $node->uuid);
    $this->assertTrue(!empty($node->webform['validation']));

    // Compare data with the defaults in the feature.
    $defaults = features_get_default('uuid_node', 'webform_validation_testing');
    $default_node = (object) reset($defaults);
    $this->assertEqual($default_node->webform['validation'], $node->webform['validation']);
  }

}
