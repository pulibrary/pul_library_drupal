<?php
/**
 * @file
 * Entityreference view widget module.
 */

/**
 * Implements hook_views_data_alter().
 */
function entityreference_view_widget_views_data_alter(&$data) {
  foreach (entity_get_info() as $info) {
    if (isset($info['base table']) && isset($data[$info['base table']]['table'])) {
      $data[$info['base table']]['entityreference_view_widget'] = array(
        'title' => $data[$info['base table']]['table']['group'],
        'group' => t('Entity Reference View Widget Checkbox'),
        'help' => t('Provide a checkbox to select the row for an entity reference.'),
        'real field' => $info['entity keys']['id'],
        'field' => array(
          'handler' => 'entityreference_view_widget_handler_field_checkbox',
          'click sortable' => FALSE,
        ),
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function entityreference_view_widget_theme() {
  return array(
    'entityreference_view_widget_widget' => array(
      'render element' => 'widget',
    ),
    'entityreference_view_widget_rows' => array(
      'render element' => 'rows',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function entityreference_view_widget_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'entityreference_view_widget') . '/views',
  );
}

/**
 * Implements hook_field_widget_info().
 */
function entityreference_view_widget_field_widget_info() {
  $widgets['entityreference_view_widget'] = array(
    'label' => t('View'),
    'description' => t('An advanced, view-based widget.'),
    'field types' => array(
      'entityreference',
      'commerce_customer_profile_reference',
      'commerce_line_item_reference',
      'commerce_product_reference',
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function entityreference_view_widget_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'entityreference_view_widget') {
    // Get a list of all views that contain a "Entityreference View Widget" display.
    $options = array();
    $displays = views_get_applicable_views('entityreference view display');

    if (strpos($field['type'], 'commerce_') === 0) {
      $target_type = str_replace('_reference', '', $field['type']);
    }
    else {
      $target_type = $field['settings']['target_type'];
    }

    foreach ($displays as $data) {
      list($view, $display_id) = $data;
      if ($view->base_table != $target_type) {
        continue;
      }
      $view_name = !empty($view->human_name) ? $view->human_name : $view->name;
      $options[$view->name . '|' . $display_id] = check_plain($view_name . ' | ' . $view->display_handler->display->display_title);
    }

    $element['view'] = array(
      '#type' => 'select',
      '#title' => t('View'),
      '#description' => t('Specify the View to use for selecting items. Only views that have an "Entityreference View Widget" display are shown.'),
      '#options' => $options,
      '#default_value' => isset($settings['view']) ? $settings['view'] : '',
      '#required' => TRUE,
    );
    $element['pass_argument'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass selected entity ids to View'),
      '#description' => t('If enabled, the View will get all selected entity ids as the first argument. Useful for excluding already selected items.'),
      '#default_value' => isset($settings['pass_argument']) ? $settings['pass_argument'] : '',
    );
    $element['close_modal'] = array(
      '#type' => 'checkbox',
      '#title' => t('Close modal window after submitting the items'),
      '#description' => t('If enabled, the modal window will close after you had selected the entities from the view and submitted your selection.'),
      '#default_value' => isset($settings['close_modal']) ? $settings['close_modal'] : '',
    );
    $element['allow_duplicates'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow the same entity to be referenced multiple times.'),
      '#description' => t('If enabled, this will allow you to reference the same entity multiple times.'),
      '#default_value' => isset($settings['allow_duplicates']) ? $settings['allow_duplicates'] : FALSE,
    );
  }

  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function entityreference_view_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  _entityreference_view_widget_add_resources($form);
  $element['#theme'] = 'entityreference_view_widget_widget';
  // Build the path of the element.
  $parents_path = $field['field_name'];
  if (!empty($form['#parents'])) {
    $parents = $form['#parents'];
    $first_parent = array_shift($parents);
    $parents_path = $first_parent;
    if (!empty($parents)) {
      $parents_path .= '[' . implode('][', $parents) . ']';
    }
    $parents_path .= '[' . $field['field_name'] . ']';
  }
  $frontend_id = drupal_html_id($field['field_name']);

  $index = _entityreference_view_widget_get_index();
  $settings = array(
    'langcode' => $langcode,
    'table_id' => $frontend_id . '-values',
    'element' => $parents_path,
    'instance' => $instance,
    'field' => $field,
    'index' => $index,
    'column' => key($field['columns']),
  );
  // Append the widget settings to the array.
  $settings += $instance['widget']['settings'];
  if (strpos($field['type'], 'commerce_') === 0) {
    $settings['target_type'] = str_replace('_reference', '', $field['type']);
  }
  else {
    $settings['target_type'] = $field['settings']['target_type'];
  }

  $add_more_text = ($field['cardinality'] == 1) ? t('Add item') : t('Add items');
  $element['add_more'] = array(
    '#value' => $add_more_text,
    '#ajax' => array(
      'callback' => 'entityreference_view_widget_add_more_ajax',
    ),
    '#ervw_settings' => $settings,
    '#limit_validation_errors' => array(),
    '#element_validate' => array('entityreference_view_widget_validate'),
    '#attributes' => array(
      'class' => array('ervw-add-items'),
    ),
    '#type' => 'button',
    '#name' => 'add_more_' . $index,
  );

  $entity_ids = array();
  foreach ($items as $item) {
    $entity_ids[] = $item[$settings['column']];
  }
  $element += entityreference_view_widget_rows($entity_ids, $settings);

  return $element;
}

/**
 * Dumb helper function used to return a different number for each element.
 */
function _entityreference_view_widget_get_index() {
  $index = & drupal_static(__FUNCTION__, 0);
  $index++;
  return $index;
}

/**
 * Ajax callback for the add_more button.
 */
function entityreference_view_widget_add_more_ajax($form, $form_state) {
  $commands = array();
  if (isset($form_state['triggering_element']['#ervw_settings'])) {
    $settings = $form_state['triggering_element']['#ervw_settings'];
    $target_view = explode('|', $settings['view']);
    $view = views_get_view($target_view[0]);
    if (!empty($view)) {
      // If the pass argument setting has been checked, pass a list of entity
      // ids to the view.
      if (!empty($settings['pass_argument']) && !empty($form_state['ervw_ids'][$settings['index']])) {
        $view->set_arguments(array(implode('+', $form_state['ervw_ids'][$settings['index']])));
      }
      $view->set_display($target_view[1]);
      $view->display_handler->set_option('use_ajax', TRUE);
      $view_markup = $view->preview();
      $html = '';

      // In case there's exposed widgets, put them at the top of the modal.
      if (!empty($view->exposed_widgets)) {
        $html .= '<div class="view-filters">' . $view->exposed_widgets . '</div>';
      }

      // Prepare an array containing information used by the form displayed in
      // the modal.
      $context = array(
        'settings' => $settings,
        'view_markup' => $view_markup,
        'view' => $view,
      );
      $output = drupal_get_form('entityreference_view_widget_modal_form', $context);
      $html .= drupal_render($output);
      $modal_title = $view->get_title();
      $modal_title = empty($modal_title) ? $view->get_human_name() : $modal_title;
      $commands[] = ctools_modal_command_display($modal_title, $html);
      // Wipe the system/ajax url, if we don't do this, the ajax_get_form()
      // callback will be called and any form actions performed within the view
      // such as changing the page or submitting the exposed filters form will
      // break.
      $_GET['q'] = '';
    }
  }
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Implements hook_preprocess_views_view().
 *
 * In case the view is using our custom display plugin, remove the exposed
 * filters from the output, we're already outputting that on top of the modal
 * content.
 */
function entityreference_view_widget_preprocess_views_view(&$vars) {
  if ($vars['view']->display_handler instanceof entityreference_view_widget_plugin_display) {
    $vars['exposed'] = '';
  }
}

/**
 * Attach the required js and libraries for the widget.
 */
function _entityreference_view_widget_add_resources(&$form) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_include('plugins');
  ctools_modal_add_js();
  $module_path = drupal_get_path('module', 'entityreference_view_widget');
  $form['#attached']['js'][] = $module_path . '/entityreference_view_widget.js';
  $form['#attached']['css'][] = $module_path . '/entityreference_view_widget.css';
}

/**
 * Pushes input values to form state.
 */
function entityreference_view_widget_validate($element, &$form_state, $form) {
  array_pop($element['#parents']);
  $form_existing = drupal_array_get_nested_value($form, $element['#parents']);

  // Modules like entityreference_prepopulate might hide or disable the field,
  // in that case we shouldn't check for user input.
  if (!empty($form_existing['#disabled']) || (isset($form_existing['#access']) && !$form_existing['#access'])) {
    return;
  }

  $input = drupal_array_get_nested_value($form_state['input'], $element['#parents']);
  $settings = $element['#ervw_settings'];

  if (!empty($input)) {
    $entity_ids = array();
    foreach ($input as $value) {
      if (!empty($value[$settings['column']])) {
        $entity_ids[] = $value[$settings['column']];
        $valid = TRUE;
      }
    }
    $form_state['ervw_ids'][$settings['index']] = $entity_ids;
    $rows = entityreference_view_widget_rows($entity_ids, $settings);
    // Put back the rows in the form.
    drupal_array_set_nested_value($form, $element['#parents'], $form_existing + $rows);
  }
  form_set_value($element, $input, $form_state);

  if ($settings['instance']['required'] && empty($valid)) {
    form_set_error($settings['element'], t('@f field is required!', array('@f' => $settings['instance']['label'])));
  }
}

/**
 * Form constructor for the modal form.
 */
function entityreference_view_widget_modal_form($form, &$form_state, $context) {
  $form_state['ervw_settings'] = $context['settings'];
  $form['view-markup'] = array(
    '#markup' => $context['view_markup'],
  );
  $form['selected_entity_ids'] = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'id' => 'ervw-modal-form-selected-entity-ids',
    ),
  );
  $form['submit'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('entityreference-view-widget-modal-submit'),
      'data-table-id' => $context['settings']['table_id'],
    ),
    '#value' => '',
    'button_add' => array(
      '#type' => 'button',
      '#value' => t('Submit'),
      '#attributes' => array(
        'class' => array('button'),
      ),
      '#ajax' => array(
        'callback' => 'entityreference_view_widget_ajax',
      ),
    ),
  );
  if ($context['settings']['field']['cardinality'] != 1) {
    $form['submit']['select_all'] = array(
      '#markup' => l(t('Select all'), '', array('attributes' => array('id' => 'entityreference-view-widget-select-all'))),
    );
  }
  return $form;
}

/**
 * Make the field widget values draggable.
 */
function entityreference_view_widget_command_draggable($selector) {
  return array(
    'command' => 'ervw_draggable',
    'selector' => $selector,
  );
}

/**
 * Ajax callback to transform selected entity IDs into table rows.
 */
function entityreference_view_widget_ajax($form, $form_state) {
  $commands = array();
  if (!empty($form_state['input']['entity_ids'])) {
    // Retrieve the settings array stored in the form_state.
    $widget_settings = $form_state['ervw_settings'];
    $selected_entity_ids = !empty($form_state['values']['selected_entity_ids']) ? explode(';', $form_state['values']['selected_entity_ids']) : array();
    $input_ids = array_merge($selected_entity_ids, $form_state['input']['entity_ids']);
    $entity_ids = !empty($widget_settings['allow_duplicates']) ? $input_ids : array_unique($input_ids);
    $selected_amount = count($entity_ids);

    // If the user selected too many items...
    if ($widget_settings['field']['cardinality'] > 0 && $widget_settings['field']['cardinality'] < $selected_amount) {
      $error_message = t('Please select no more than @cardinality values', array('@cardinality' => $widget_settings['field']['cardinality']));
      $commands[] = ajax_command_prepend('#modal-content', '<div class="messages error">' . $error_message  . '</div>');
    }
    else {
      $rows['#theme'] = 'entityreference_view_widget_rows';
      $rows['#widget_settings'] = $widget_settings;
      $rows += entityreference_view_widget_rows($entity_ids, $widget_settings);
      // Replace the whole table with updated values.
      $commands[] = ajax_command_replace('#' . $widget_settings['table_id'] . ' tbody', '<tbody>' . render($rows) . '</tbody>');
      // Make the table rows draggables.
      if ($widget_settings['field']['cardinality'] != 1) {
        $commands[] = entityreference_view_widget_command_draggable($widget_settings['table_id']);
      }
      // Automatically close the modal if necessary.
      if (!empty($widget_settings['close_modal'])) {
        ctools_include('modal');
        $commands[] = ctools_modal_command_dismiss();
      }
    }
  }
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Returns a renderable array for multiple field values.
 */
function entityreference_view_widget_rows($entity_ids, $settings) {
  $rows = array();
  $entities = entity_load($settings['target_type'], $entity_ids);
  if (!empty($entity_ids)) {
    $max_delta = count($entity_ids);
    $weight_options = drupal_map_assoc(range(- $max_delta, $max_delta));
    $delta = 0;
    foreach ($entity_ids as $entity_id) {
      $frontend_id = drupal_html_id('edit-' . $settings['element'] . '-' . $settings['langcode'] . '-' . $delta);
      $label = entity_label($settings['target_type'], $entities[$entity_id]);
      $name = $settings['element'] . '[' . $settings['langcode'] . '][' . $delta . ']';

      $rows[] = array(
        $settings['column'] => array(
          '#type' => 'checkbox',
          '#delta' => $delta,
          '#field_suffix' => '<label class="option" for="' . $frontend_id . '">' . $label . '</label>',
          '#return_value' => $entity_id,
          '#value' => $entity_id,
          '#title_display' => 'after',
          '#name' => $name . '[' . $settings['column'] . ']',
          '#attributes' => array(
            'checked' => 'checked',
            'id' => $frontend_id,
            'data-delta' => $delta,
          ),
        ),
        // For some reasons, when using the weight element, when submitting the
        // modal form the element is not displayed.
        '_weight' => array(
          '#type' => 'select',
          '#options' => $weight_options,
          '#title' => t('Weight'),
          '#value' => $delta,
          '#title_display' => 'invisible',
          '#name' => $name . '[_weight]',
          '#attributes' => array(
            'id' => $frontend_id . '-weight',
            'class' => array(drupal_html_class($settings['element'] . '-delta-order')),
          ),
        ),
      );
      $delta++;
    }
  }
  return $rows;
}

/**
 * Theme function for the whole widget.
 */
function theme_entityreference_view_widget_widget($variables) {
  $widget = $variables['widget'];
  $settings = $widget['add_more']['#ervw_settings'];
  $order_class = drupal_html_class($settings['element'] . '-delta-order');
  $required = !empty($settings['instance']['required']) ? theme('form_required_marker', $variables) : '';

  $header = array(
    array(
      'data' => '<label>' . t('!title !required', array('!title' => $widget['#title'], '!required' => $required)) . "</label>",
      'colspan' => 2,
      'class' => array('field-label'),
    ),
  );
  if ($settings['field']['cardinality'] !== '1') {
    $header[] = array(
      'data' => t('Order'),
      'class' => array('tabledrag-hide'),
    );
  }
  $rows = array();

  // Sort items according to '_weight' (needed when the form comes back after
  // preview or failed validation)
  $items = array();
  foreach (element_children($widget) as $key) {
    if ($key === 'add_more') {
      $add_more_button = &$widget[$key];
    }
    else {
      $items[] = &$widget[$key];
    }
  }
  usort($items, '_field_sort_items_value_helper');

  // Add the items as table rows.
  foreach ($items as $item) {
    $item['_weight']['#attributes']['class'] = array($order_class);
    $delta_element = drupal_render($item['_weight']);
    $cells = array(
      array('data' => '', 'class' => array('field-multiple-drag')),
      drupal_render($item),
    );
    if ($settings['field']['cardinality'] !== '1') {
      $cells[] = array('data' => $delta_element, 'class' => array('delta-order'));
    }
    $rows[] = array(
      'data' => $cells,
      'class' => array('draggable'),
    );
  }

  if (empty($rows)) {
    $rows[][] = array(
      'data' => t('No items had been added yet. Click "Add items" to launch the widget.'),
      'colspan' => '3',
    );
  }

  $output = '<div class="form-item">';
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => $settings['table_id'],
      'class' => array('field-multiple-table')
    ),
  ));
  $output .= $widget['#description'] ? '<div class="description">' . $widget['#description'] . '</div>' : '';
  $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
  $output .= '</div>';

  if ($settings['field']['cardinality'] !== '1') {
    drupal_add_tabledrag($settings['table_id'], 'order', 'sibling', $order_class);
  }

  return $output;
}

/**
 * Theme function for a selection of table rows.
 */
function theme_entityreference_view_widget_rows($variables) {
  $zebra = array('even' => 'odd');

  $settings = $variables['rows']['#widget_settings'];
  foreach (element_children($variables['rows']) as $row) {
    $output[$row]  = '<tr class="draggable ' . current($zebra) . '">';
    $output[$row] .= '<td class="field-multiple-drag"></td>';
    $output[$row] .= '<td>' . render($variables['rows'][$row][$settings['column']]) . '</td>';
    if ($settings['field']['cardinality'] !== '1') {
      $output[$row] .= '<td class="delta-order tabledrag-hide">' . render($variables['rows'][$row]['_weight']) . '</td>';
    }
    $output[$row] .= '</tr>';

    $zebra = array_flip($zebra);
  }

  return implode("\n", $output);
}
